# Production Worker Docker Image  
# Builds on authenticated CLI base with clean worker application

FROM fondation-cli:auth-cli AS base

# Install worker dependencies
WORKDIR /app

# Copy built worker application 
COPY packages/worker/dist/ ./worker/

# Copy built shared package  
COPY packages/shared/dist/ ./shared/

# Create clean package.json for worker (no external dependencies needed)
RUN cd ./worker && echo '{\
  "name": "@fondation/worker",\
  "version": "1.0.0",\
  "type": "module",\
  "main": "index.js",\
  "dependencies": {\
    "convex": "^1.26.1"\
  }\
}' > package.json

# Install worker dependencies and convex globally for API access
RUN cd ./worker && npm install
RUN npm install -g convex@^1.26.1

# CLI bundle and prompts already available from base image
# CLI: /app/cli.bundled.cjs, Prompts: /app/prompts/

# Create worker user and directories  
RUN addgroup -g 1001 worker && \
    adduser -D -u 1001 -G worker worker && \
    mkdir -p /tmp/fondation && \
    chown -R worker:worker /app /tmp/fondation

# Set working directory for worker
WORKDIR /app/worker

# Switch to worker user  
USER worker

# Set production environment
ENV NODE_ENV=production \
    TEMP_DIR=/tmp/fondation \
    CLI_PATH=/app/cli.bundled.cjs

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "const http = require('http'); const req = http.request({hostname:'localhost',port:8080,path:'/health'}, res => process.exit(res.statusCode === 200 ? 0 : 1)); req.on('error', () => process.exit(1)); req.end();" || exit 1

# Expose health port
EXPOSE 8080

# Start worker service
CMD ["node", "index.js"]