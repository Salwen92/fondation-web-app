import { existsSync } from 'node:fs';
import { writeFile } from 'node:fs/promises';
import { resolve } from 'node:path';
import { Command } from 'commander';
import { cosmiconfig } from 'cosmiconfig';
import type { Logger } from 'pino';
import { z } from 'zod';
import type { CLIConfig } from '../utils/config';
import { displayConfig } from '../utils/config';

// Config schema for validation
const ConfigSchema = z.object({
  model: z.enum(['claude-sonnet-4-20250514', 'claude-opus-4-20250514']).optional(),
  outputDir: z.string().optional(),
  temperature: z.number().min(0).max(1).optional(),
  maxOutputTokens: z.number().positive().optional(),
  logMessages: z.boolean().optional(),
  verbose: z.boolean().optional(),
  tools: z.array(z.string()).optional(),
  profiles: z.record(z.string(), z.any()).optional(),
});

export const configCommand = new Command('config')
  .description('Manage CLI configuration')
  .addCommand(
    new Command('init')
      .description('Create a new configuration file')
      .option('-f, --format <format>', 'config file format', 'yaml')
      .option('--force', 'overwrite existing config')
      .action(async (options, command) => {
        const logger: Logger = command.optsWithGlobals()._logger;
        await initConfig(logger, options);
      }),
  )
  .addCommand(
    new Command('show')
      .description('Display current configuration')
      .option('--json', 'output as JSON')
      .option('--show-defaults', 'show built-in default values')
      .action(async (options, command) => {
        const globalOptions = command.parent?.parent?.opts() || {};
        const config: CLIConfig = command.optsWithGlobals()._config;
        // const _logger: Logger = command.optsWithGlobals()._logger;

        const configOptions = {
          configPath: globalOptions.config,
          profile: globalOptions.profile,
          cliOptions: { ...globalOptions, ...options },
        };

        if (options.json) {
          process.stdout.write(`${JSON.stringify(config, null, 2)}\n`);
        } else {
          displayConfig(config, configOptions);
        }

        if (options.showDefaults) {
          // Show default values alongside current config
        }
      }),
  )
  .addCommand(
    new Command('get')
      .description('Get a configuration value')
      .argument('<key>', 'configuration key')
      .action(async (key: string, _options, command) => {
        const config: CLIConfig = command.optsWithGlobals()._config;
        const logger: Logger = command.optsWithGlobals()._logger;
        await getConfig(key, config, logger);
      }),
  )
  .addCommand(
    new Command('validate')
      .description('Validate configuration file')
      .option('-f, --file <path>', 'config file path')
      .action(async (options, command) => {
        const logger: Logger = command.optsWithGlobals()._logger;
        await validateConfig(logger, options);
      }),
  );

interface InitConfigOptions {
  format?: string;
  force?: boolean;
}

async function initConfig(logger: Logger, options: InitConfigOptions): Promise<void> {
  const format = options.format || 'yaml';
  const filename = `.fondation.${format}`;
  const filepath = resolve(process.cwd(), filename);

  if (existsSync(filepath) && !options.force) {
    logger.error(`Configuration file already exists: ${filename}`);
    logger.info('Use --force to overwrite');
    process.exit(1);
  }

  const defaultConfig = {
    model: 'claude-sonnet-4-20250514',
    outputDir: '.claude-output',
    temperature: 0.7,
    maxOutputTokens: 4096,
    logMessages: false,
    verbose: false,
    tools: ['Read', 'Write', 'Edit', 'MultiEdit', 'Bash', 'Glob', 'Grep', 'LS'],
    sandbox: 'none',
    profiles: {
      dev: {
        verbose: true,
        logMessages: true,
      },
      production: {
        model: 'claude-opus-4-20250514',
        temperature: 0.3,
        sandbox: 'docker',
      },
    },
  };

  let content: string;
  if (format === 'yaml') {
    const yaml = await import('js-yaml');
    content = `# Claude Prompts CLI Configuration
# Generated by: fondation config init

${yaml.dump(defaultConfig)}`;
  } else {
    content = JSON.stringify(defaultConfig, null, 2);
  }

  await writeFile(filepath, content, 'utf-8');
  logger.info(`Configuration file created: ${filename}`);
  logger.info('Edit this file to customize your settings');
}

async function getConfig(key: string, config: CLIConfig, logger: Logger): Promise<void> {
  const keys = key.split('.');
  let value: unknown = config;

  for (const k of keys) {
    if (value && typeof value === 'object' && k in value) {
      value = (value as Record<string, unknown>)[k];
    } else {
      logger.error(`Configuration key not found: ${key}`);
      process.exit(1);
    }
  }
}

interface ValidateConfigOptions {
  file?: string;
}

async function validateConfig(logger: Logger, options: ValidateConfigOptions): Promise<void> {
  if (options.file) {
    const explorer = cosmiconfig('fondation');
    const result = await explorer.load(resolve(process.cwd(), options.file));

    if (!result) {
      logger.error(`Configuration file not found: ${options.file}`);
      process.exit(1);
    }

    try {
      ConfigSchema.parse(result.config);
      logger.info('Configuration is valid');
    } catch (error) {
      if (error instanceof z.ZodError) {
        logger.error('Configuration validation failed:');
        for (const issue of error.issues) {
          logger.error(`  ${issue.path.join('.')}: ${issue.message}`);
        }
      } else {
        logger.error('Unknown validation error');
      }
      process.exit(1);
    }
  } else {
    logger.info('Using built-in defaults - no file validation needed');
  }
}
