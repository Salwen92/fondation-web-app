# Multi-stage build for Fondation CLI with Worker
# IMPORTANT: We use official Bun images instead of node:alpine because:
# 1. Bun doesn't have official Alpine ARM64 binaries (breaks on Apple Silicon)
# 2. The oven/bun images handle all platform compatibility issues
# 3. Use `bunx` or `bun x` instead of `npx` for running commands
# See docs/DOCKER_BUILD_GUIDE.md for detailed information

# Stage 1: Build with official Bun image
FROM oven/bun:1.2.5 AS builder

WORKDIR /build

# Copy package files for all workspace packages
COPY package.json bun.lock ./
COPY packages/shared/package.json ./packages/shared/
COPY packages/cli/package.json ./packages/cli/
COPY packages/worker/package.json ./packages/worker/

# Install dependencies
RUN bun install

# Copy source code
COPY packages/shared ./packages/shared
COPY packages/cli ./packages/cli
COPY packages/worker ./packages/worker
COPY convex ./convex
COPY tsconfig.json ./
COPY biome.json ./

# Build shared package first (dependency)
WORKDIR /build/packages/shared
RUN bun run build

# Build CLI package
WORKDIR /build/packages/cli
RUN bun run build

# Bundle the CLI
RUN bun build dist/cli.js --outfile dist/cli.bundled.mjs --target=node --format=esm --external @anthropic-ai/claude-code

# Copy prompts to dist
RUN cp -r prompts dist/prompts

# Build Worker package (bundle with all dependencies)
WORKDIR /build/packages/worker
# Bundle the Worker with convex included
RUN bun build src/index.ts --outfile dist/worker.bundled.mjs --target=node --format=esm --minify

# Stage 2: Runtime with slim Bun image
FROM oven/bun:1.2.5-slim

# Install bash, curl for Claude SDK, git for repository access, and Doppler CLI
RUN apt-get update && \
    apt-get install -y bash curl git ca-certificates gnupg && \
    # Install Doppler CLI
    curl -Ls --tlsv1.2 --proto "=https" --retry 3 \
        https://cli.doppler.com/install.sh | sh && \
    # Clean up
    apt-get remove -y gnupg && \
    apt-get autoremove -y && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy bundled CLI and prompts from builder
COPY --from=builder /build/packages/cli/dist/cli.bundled.mjs ./cli/dist/
COPY --from=builder /build/packages/cli/dist/prompts ./cli/dist/prompts/
COPY --from=builder /build/packages/cli/package.json ./cli/

# Copy bundled Worker from builder
COPY --from=builder /build/packages/worker/dist/worker.bundled.mjs ./worker/dist/

# Install ONLY Claude SDK as external dependency
RUN cd /app/cli && bun add @anthropic-ai/claude-code@latest && \
    # Create symlink for the CLI to find the SDK at the expected location
    mkdir -p /app/node_modules && \
    ln -s /app/cli/node_modules/@anthropic-ai /app/node_modules/@anthropic-ai && \
    # Create the expected entrypoints symlink for Claude SDK
    mkdir -p /app/cli/node_modules/@anthropic-ai/entrypoints && \
    ln -s /app/cli/node_modules/@anthropic-ai/claude-code/cli.js /app/cli/node_modules/@anthropic-ai/entrypoints/cli.js

# Create workspace and output directories
RUN mkdir -p /workspace /output

# Create symlink for prompts path resolution (for both source and dist locations)
RUN ln -sf /app/cli/dist/prompts /app/cli/prompts

# Set environment (tokens should be provided at runtime)
ENV NODE_ENV=production \
    SHELL=/bin/bash \
    HOME=/root

# Verify CLI works
RUN bun /app/cli/dist/cli.bundled.mjs --version

# Default entrypoint runs the CLI using Doppler + Bun
# Use: docker run -e DOPPLER_TOKEN=<token> fondation/cli:latest [command] [args]
# Examples:
#   docker run -e DOPPLER_TOKEN=$TOKEN fondation/cli:latest analyze --repo owner/name
#   docker run -e DOPPLER_TOKEN=$TOKEN fondation/cli:latest worker --convex-url <url>
# Note: If DOPPLER_TOKEN is not provided, falls back to environment variables
ENTRYPOINT ["sh", "-c", "if [ -n \"$DOPPLER_TOKEN\" ]; then doppler run -- bun /app/cli/dist/cli.bundled.mjs \"$@\"; else bun /app/cli/dist/cli.bundled.mjs \"$@\"; fi", "--"]
CMD ["--help"]