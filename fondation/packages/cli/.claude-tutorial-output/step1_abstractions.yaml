- name: |
    Workflow Orchestration
  description: |
    The central pattern that coordinates the entire 6-phase tutorial generation process. It's like a project manager that ensures each step (abstractions, relationships, ordering, generation, review, tutorials) happens in the right sequence. The workflow manages state, handles errors, tracks progress, and provides real-time feedback through a rich UI interface.
  file_paths:
    - src/ui-analyze-all.tsx
    - src/analyze-all.ts

- name: |
    Claude SDK Integration
  description: |
    The core integration layer that connects the application to Anthropic's Claude Code SDK. It's like a translator that converts user prompts into Claude API calls, handles streaming responses, manages tool usage, and processes the AI's responses. This abstraction handles session management, abort controls, and message formatting.
  file_paths:
    - src/ui/hooks/useClaudeQuery.ts
    - src/config.ts
    - src/env.ts

- name: |
    Chapter Generation Pipeline
  description: |
    A sophisticated content generation system that transforms abstractions into educational chapters. It's like an assembly line that takes raw code concepts and turns them into structured, beginner-friendly tutorials. Uses parallel processing, template interpolation, and intelligent prompt engineering to create consistent, high-quality educational content.
  file_paths:
    - src/chapter-generator.ts
    - src/chapter-reviewer.ts
    - src/tutorial-generator.ts

- name: |
    Prompt Template System
  description: |
    A modular system for managing AI prompts across different phases of the workflow. It's like a recipe book where each phase has its own detailed instructions for Claude. Templates support variable interpolation and can be customized for different project types and educational goals.
  file_paths:
    - prompts/1-abstractions.md
    - prompts/2-analyze-relationshipt.md
    - prompts/3-order-chapters.md
    - prompts/4-write-chapters.md
    - prompts/5-review-chapters.md
    - prompts/6-tutorials.md

- name: |
    Schema Validation Framework
  description: |
    A type-safe data validation system built on Zod that ensures data integrity throughout the workflow. It's like a quality control inspector that verifies all YAML files, tool inputs, and data structures match expected formats. This prevents errors and ensures consistent data flow between phases.
  file_paths:
    - src/schemas/tools.ts
    - src/schemas/toolResults.ts
    - src/schemas/toolResultsStructured.ts

- name: |
    React-based Terminal UI
  description: |
    A sophisticated terminal interface built with Ink that provides real-time feedback during the analysis process. It's like a dashboard that shows progress bars, step statuses, query monitoring, error handling, and logs. Makes the complex workflow transparent and user-friendly.
  file_paths:
    - src/ui/components/App.tsx
    - src/ui/components/ProgressTracker.tsx
    - src/ui/components/QueryMonitor.tsx
    - src/ui/components/StatusDisplay.tsx

- name: |
    File Generation Utilities
  description: |
    A utility system for managing file operations throughout the workflow. It's like a librarian that handles file naming conventions, existence checks, overwrite policies, and directory management. Ensures consistent file organization and prevents accidental overwrites.
  file_paths:
    - src/utils/file-generation.ts
    - src/utils/format.ts

- name: |
    Tool Integration Layer
  description: |
    A comprehensive system for integrating with Claude's various tools (Read, Write, Glob, Grep, etc.). It's like a toolbox that provides type-safe interfaces for file operations, code analysis, and content generation. Handles tool results, parsing, and UI display consistently.
  file_paths:
    - src/ui/components/tools/ToolFactory.tsx
    - src/ui/components/tools/ToolRenderer.tsx
    - src/ui/components/tools/toolConfigs.tsx

- name: |
    Message and Chat System
  description: |
    A sophisticated messaging system that handles conversation flow between user and Claude. It's like a conversation manager that tracks message history, handles tool usage within conversations, manages state updates, and provides real-time feedback during long-running operations.
  file_paths:
    - src/types/chat.ts
    - src/types/adapters.ts
    - src/ui/hooks/useChatState.ts
    - src/ui/hooks/useChatInput.ts

- name: |
    Content Analysis Framework
  description: |
    The core system that analyzes codebases to extract abstractions, relationships, and learning paths. It's like a code archaeologist that examines project structure, identifies key patterns, understands dependencies, and determines the optimal way to teach the codebase to newcomers.
  file_paths:
    - src/chapter-generator.ts
    - src/utils/messageLogger.ts

- name: |
    Mock and Testing Infrastructure
  description: |
    A comprehensive system for testing and mocking the UI components and workflows. It's like a rehearsal stage where components can be tested in isolation, workflows can be simulated, and edge cases can be explored without hitting the real Claude API.
  file_paths:
    - src/ui/hooks/useClaudeQuery.mock.ts
    - scripts/generate-ui-mock.tsx
    - scripts/mockData.ts
    - src/utils/mockData.ts